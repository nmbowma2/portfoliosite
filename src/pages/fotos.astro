---
const BASE = import.meta.env.BASE_URL;

---
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>fotos i've taken/made</title>
    <link href="https://fonts.googleapis.com/css2?family=Futura:wght@400&display=swap" rel="stylesheet">
    <link rel="icon" href={`${BASE}mountain.png`} type="image/png" sizes="any" />

    <style>
        * {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            padding: 8px;
            background-color: black;
            font-family: 'Futura', Arial, sans-serif;
            min-height: 100vh;
            overflow-x: hidden;
        }

        .return-link {
            position: fixed;
            top: 36px;
            left: 36px;
            color: red;
            font-size: 16px;
            text-decoration: none;
            z-index: 2000;
            transition: transform 0.2s ease;
        }

        .return-link:hover {
            transform: scale(1.05);
        }
        
/* One place, responsive auto-fill at 56px squares (tweak to taste) */
/* Thumbs: fixed-size square cells */
        .photos-container{
            display:grid;
            grid-auto-rows: 200px;                            /* ðŸ‘ˆ locks the row height */
            justify-content:center;
            width:100%;
            max-width:1400px;
            margin:0 auto;
            padding:60px 20px 20px;
        }

        .photos-container::before {
            content: "";
            position: absolute;
            left: 0%;
            top: 0%;
            width:100%;
            height:125%;
            background-image: url("../assets/photos/cuttingmat.png");
            background-repeat: repeat;        /* or no-repeat / cover / contain */
            background-position: center;
            border-radius: 8px;               /* optional: give the box rounded corners */
            z-index: -1;                       /* behind tiles */
            pointer-events: none;             /* never intercept clicks */
        }
        
        .photo-item {
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
            border-radius: 4px;
            background-color: #111;

            cursor: pointer;   /* hand cursor */
            position: relative; /* needed for overlay positioning */
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            
        }
        .photo-item img {
            object-fit: cover;
            object-position: center;
            width: 100%;
            height: 100%;
        }


        .photo-item.not-found {
            background: linear-gradient(45deg, #222, #333);
            border: 1px solid #444;
        }

        .photo-item.not-found::before {
            content: "?";
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #666;
            font-size: 24px;
            font-weight: bold;
        }
                /* Error state */
        .photo-item.error {
            background: #2a0a0a;
            border: 1px solid #441111;
        }

        .photo-item.error::before {
            content: "âœ•";
            color: #aa4444;
        }
      

        /* Modal Overlay */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0, 0, 0, 0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 3000;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease, visibility 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .modal-content {
            position: relative;
            max-width: 90vw;
            max-height: 90vh;
            transform: scale(0.8);
            top: 0%;
            transition: transform 0.3s ease;
        }

        .modal-overlay.active .modal-content {
            transform: scale(1);
        }

        .modal-image {
            width: auto;
            height: auto;
            max-width: 90vw;
            max-height: 90vh;
            object-fit: contain;
            border-radius: 8px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
        }

        .modal-close {
            position: absolute;
            top: -40px;
            right: 0;
            color: white;
            font-size: 24px;
            cursor: pointer;
            background: rgba(0, 0, 0, 0.5);
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            transition: background 0.2s ease;
        }

        .modal-close:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .loading-spinner {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 20px;
            height: 20px;
            border: 2px solid #333;
            border-top: 2px solid #fff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: translate(-50%, -50%) rotate(0deg); }
            100% { transform: translate(-50%, -50%) rotate(360deg); }
        }

                /* Mobile: 3-4 columns */
        @media (max-width: 480px)   {
            .photos-container { grid-template-columns: repeat(auto-fill, 75px); gap: 4px; grid-auto-rows: 60px; }
            .photo-item { width: 75px; height: 60px; }
            .photos-container::before {  
            left: 9%;
            top: 9%;
            width:82%;
            height:62.5%;}
            .modal-content {
            top: -10%;
            }

        }
        @media (481px <= width <= 768px)  {
            .photos-container { grid-template-columns: repeat(auto-fill, 150px); gap: 6px; } 
            .photo-item { width: 150px; height: 150px; }
            .photos-container::before {  
            left: 50%;
            top: 10%;
            width:78%;
            height:130%;}

        }
        @media (769px <= width <= 1200px) { 
            .photos-container { grid-template-columns: repeat(auto-fill, 150px); gap: 8px; } 
            .photo-item { width: 150px; height: 150px; }
        }
        @media (min-width: 1201px)  { 
            .photos-container { grid-template-columns: repeat(auto-fill, 225px); gap: 10px; } 
            .photo-item { width: 225px; height: 225px; }
            .photos-container::before {  
            left: 11%;
            top: 5%;
            width:78%;
            height:125%;}

        }

    </style>
</head>
<body>
    <a href="javascript:history.back()" class="return-link">return</a>
    
    <div class="photos-container" id="photosContainer">
        <!-- Photos will be dynamically generated here -->
    </div>

    <!-- Modal for full-size images -->
    <div class="modal-overlay" id="modalOverlay">
        <div class="modal-content">
            <div class="modal-close" id="modalClose">Ã—</div>
            <img class="modal-image" id="modalImage" alt="Full size photo">
        </div>
    </div>

<script>
        function PhotoGallery() {
            
            const container = document.getElementById('photosContainer');
            const modal = document.getElementById('modalOverlay');
            const modalImage = document.getElementById('modalImage') as HTMLImageElement;
            const modalClose = document.getElementById('modalClose');

            const folderPath = '/portfoliosite/fotos/';
            const fallbackImage = '/portfoliosite/imagenotfound.jpeg';
            let photos = [];
            
            function init() {
                setupEventListeners();
                generatePhotoGrid();
                
                window.addEventListener('resize', function() {
                    generatePhotoGrid();
                });
            }

            function setupEventListeners() {
                // Modal close events
                if (modalClose) {
                    modalClose.addEventListener('click', closeModal);
                }
                
                if (modal) {
                    modal.addEventListener('click', function(evt) {
                        if (evt.target === modal) closeModal();
                    });
                }
                
                // Keyboard events
                document.addEventListener('keydown', function(evt) {
                    if (evt.key === 'Escape') closeModal();
                });

                // Return link functionality
                const returnLink = document.querySelector('.return-link');
                if (returnLink) {
                    returnLink.addEventListener('click', function(evt) {
                        evt.preventDefault();
                        if (window.history.length > 1) {
                            window.history.back();
                        } else {
                            window.location.href = '/';
                        }
                    });
                }
            }

            function generatePhotoGrid() {
                // Clear existing photos
                if (container) {
                    container.innerHTML = '';
                }
                
                // Generate photo list
                photos = generatePhotoList();
                
                // Create photo items for all photos
                for (let i = 0; i < photos.length; i++) {
                    const photoItem = document.createElement('div');
                    photoItem.className = 'photo-item';
                    createPhotoItem(photoItem, photos[i]);
                    
                    if (container) {
                        container.appendChild(photoItem);
                    }
                }
            }

            function generatePhotoList() {
                const photoList = [];
                
                // Generate photos 1-50
                for (let i = 1; i <= 50; i++) {
                    photoList.push(folderPath + 'photo' + i + '.jpg');
                }
                
                return photoList;
            }

            function createPhotoItem(containerElement: HTMLDivElement, imagePath: string) {
                const thumbPath = imagePath.replace('/fotos/', '/fotos/thumbs/');

                // Set up proper centering styles for the background image
                containerElement.style.backgroundSize = 'cover';
                containerElement.style.backgroundPosition = 'center center';
                containerElement.style.backgroundRepeat = 'no-repeat';

                // Preload thumb, then paint background
                const t = new Image();
                t.onload = () => { 
                    containerElement.style.backgroundImage = `url("${thumbPath}")`;
                };
                t.onerror = () => { 
                    containerElement.classList.add('error');
                };
                t.src = thumbPath;

                // Clicking opens FULL-RES original
                containerElement.addEventListener('click', () => {
                    if (!containerElement.classList.contains('error')) openModal(imagePath);
                });
            }

            function openModal(imagePath: string) {
                if (modal) {
                    modal.classList.add('active');
                    document.body.style.overflow = 'hidden';
                    
                    // Reset modal image
                    if (modalImage) {
                        modalImage.src = '';
                        modalImage.style.opacity = '0.5';
                        
                        // Load full-size image
                        const fullImage = new Image();
                        fullImage.onload = function() {
                            if (modalImage) {
                                modalImage.src = imagePath;
                                modalImage.style.opacity = '1';
                            }
                        };
                        fullImage.onerror = function() {
                            if (modalImage) {
                                modalImage.src = fallbackImage;
                                modalImage.style.opacity = '1';
                            }
                        };
                        fullImage.src = imagePath;
                    }
                }
            }

            function closeModal() {
                if (modal) {
                    modal.classList.remove('active');
                    document.body.style.overflow = '';
                    
                    // Clear image source to stop loading
                    setTimeout(function() {
                        if (modal && !modal.classList.contains('active') && modalImage) {
                            modalImage.src = '';
                        }
                    }, 300);
                }
            }

            // Initialize
            init();
        }

        // Initialize gallery when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            PhotoGallery();
        });
    </script>


</body>
</html>