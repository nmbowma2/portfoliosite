---
/**
 * FiveImageSequencer.astro
 * Plays 5 transparent PNGs in sequence, 40+ frames each, at configurable FPS.
 * - sources: array of 5 images (strings or imported assets)
 * - fps: number, default 24
 * - config: [{x,y,baseScale}, ...] one per image
 */
const {
  sources = [],
  fps = 24,
  config = [
    { x: 0,   y: 0,   baseScale: 1 },
    { x: 0,   y: 0,   baseScale: 1 },
    { x: 0,   y: 0,   baseScale: 1 },
    { x: 0,   y: 0,   baseScale: 1 },
    { x: 0,   y: 0,   baseScale: 1 },
  ],
  class: className = "",
} = Astro.props;

if (!Array.isArray(sources) || sources.length < 5) {
  console.warn("[FiveImageSequencer] expected 5 images, got", sources);
}

// Convert Astro ImageMetadata or string into plain URL (base-aware)
const withBase = (u?: string) =>
  (typeof u === 'string' && u.startsWith('/'))
    ? import.meta.env.BASE_URL + u.slice(1)
    : u;

const urls = sources.map((s: string | { src: string }) =>
  typeof s === "string" ? (withBase(s) as string) : s.src
);
---

<style>
  .seq5-wrap { position: relative; width: 100%; height: 100%; }
  canvas.seq5 { display: block; width: 100%; height: 100%; background: rgba(0, 255, 0, 0.1); }
</style>

<div class={`seq5-wrap ${className}`}>
  <canvas id="seq5" class="seq5" aria-hidden="true"></canvas>
</div>

<script define:vars={{ urls, fps, config }}>
// @ts-nocheck
const RATE_UP   = .175;
const RATE_DOWN = .125;
const FRAMES_PER_IMAGE = 52;
const SLOT0 = { HOLD_START: 0,  HOLD_END: 44 };
const SLOT1 = { UP_START: 44,   UP_END: 49 };
const SLOT2 = { DOWN_START: 49, DOWN_END: 52 };

const URLS = urls;
const FPS  = fps;
const CFG  = config;

const canvas = document.getElementById("seq5");
const ctx = canvas.getContext("2d");
let dpr = Math.max(1, window.devicePixelRatio || 1);
let W = 0, H = 0;

let images = [];
let natural = [];

function preload(){
  images = new Array(5).fill(null);
  natural = new Array(5).fill([1,1]);
  URLS.forEach((u, i) => {
    const im = new Image();
    im.onload = () => {
      images[i]  = im;
      natural[i] = [im.naturalWidth, im.naturalHeight];
      if (images.every(Boolean)) start();
    };
    im.src = u;
  });
}

function resize(){
  const parent = canvas.parentElement;
  if (!parent) return;

  const width = parent.offsetWidth;
  const height = parent.offsetHeight;

  W = Math.max(1, Math.floor(width * dpr));
  H = Math.max(1, Math.floor(height * dpr));
  canvas.width  = W;
  canvas.height = H;
}



const frameDurMs = 1000 / FPS;

function scaleFactorAtLocalFrame(f) {
  if (f < SLOT1.UP_START) return 1.0;
  if (f < SLOT1.UP_END)   return 1.0 + RATE_UP * ((f - SLOT1.UP_START) / FPS);
  if (f < SLOT2.DOWN_END) {
    const gainedAt33 = 1.0 + RATE_UP * ((SLOT1.UP_END - SLOT1.UP_START) / FPS);
    return gainedAt33 - RATE_DOWN * ((f - SLOT2.DOWN_START) / FPS);
  }
  return 1.0;
}

let raf = 0;
let startTime = 0;

function draw(now) {
  raf = requestAnimationFrame(draw);
  if (!startTime) startTime = now;

  const elapsedMs   = now - startTime;
  const globalFrame = Math.floor(elapsedMs / frameDurMs);

  const imageIndex  = Math.floor(globalFrame / FRAMES_PER_IMAGE) % 5;
  const localFrame  = globalFrame % FRAMES_PER_IMAGE;

  const img = images[imageIndex];
  if (!img) return;

  const [nw, nh] = natural[imageIndex] || [img.naturalWidth, img.naturalHeight];
  ctx.clearRect(0, 0, W, H);

  const s = (CFG?.[imageIndex]?.baseScale || 1) * scaleFactorAtLocalFrame(localFrame);


  ctx.imageSmoothingEnabled = true;
  ctx.imageSmoothingQuality = "high";
    // 1. Calculate aspect ratios
  const imgAspect = nw / nh;
  const canvasAspect = W / H;

  // 2. Find the scale factor to fit the canvas (with letterboxing)
  let scaleToFit = canvasAspect > imgAspect
    ? H / nh  // canvas is wider → fit by height
    : W / nw; // canvas is taller → fit by width

  // 3. Combine with baseScale and animation scale
  const baseScale = CFG?.[imageIndex]?.baseScale || 1;
  const animScale = scaleFactorAtLocalFrame(localFrame);
  const finalScale = scaleToFit * baseScale * animScale;

  // 4. Compute final drawn width & height
  const dw = nw * finalScale;
  const dh = nh * finalScale;

  // 5. Center image, with optional pixel offsets
  const dx = (W - dw) / 2 + (CFG?.[imageIndex]?.x || 0) * dpr;
  const dy = (H - dh) / 2 + (CFG?.[imageIndex]?.y || 0) * dpr;

  // 6. Clear and draw
  ctx.clearRect(0, 0, W, H);
  ctx.imageSmoothingEnabled = true;
  ctx.imageSmoothingQuality = "high";
  ctx.drawImage(img, dx, dy, dw, dh);

}

function start() {
  cancelAnimationFrame(raf);
  startTime = performance.now();
  raf = requestAnimationFrame(draw);
}

window.addEventListener("resize", resize, { passive:true });
resize();
preload();
</script>
