---
export interface Props {
  label?: string;
  durationMs?: number;
  targetSelector?: string;
  overlaySelector?: string;     // optional; leave blank to keep overlay visible
  icon?: string | { src: string };
  iconWidth?: string;
  hideOnComplete?: boolean;
  strokeRadius?: number;
  strokeStart?: "bottom-center" | "top-center";
  class?: string;
}

const {
  label = "ENTER",
  durationMs = 3000,
  targetSelector = "#enter-stage",
  overlaySelector = "",
  icon,
  iconWidth = "16px",
  hideOnComplete = true,
  strokeRadius = 10,
  strokeStart = "bottom-center",
  class: className = "",
} = Astro.props;

const withBase = (u?: string) =>
  (typeof u === 'string' && u.startsWith('/'))
    ? import.meta.env.BASE_URL + u.slice(1)
    : u;

const toUrl = (v?: string | { src: string }) =>
  typeof v === "string" ? (withBase(v) as string) : v?.src;

const iconUrl = icon ? toUrl(icon) : null;
---

<style>
  .enter-wrap{position:absolute;left:49.5%;bottom:50%;transform:translateX(-50%);z-index:70}
  .enter-btn{
    -webkit-tap-highlight-color:transparent;
    position:relative;display:inline-flex;align-items:center;gap:.5rem;
    padding:14px 28px;border-radius:10px;border:0;cursor:pointer;
    background:#ef4444;color:#fff;font-weight:700;letter-spacing:.06em;
    box-shadow:0 6px 18px rgba(239,68,68,.25);
    transform:scale(var(--press,1));filter:brightness(var(--b,1));
    transition:transform 150ms ease,filter 120ms ease,opacity 200ms ease
  }
  .enter-btn:hover{--b:.92}
  .enter-btn:active{--b:.85;--press:1.03}
  .enter-btn[aria-disabled="true"]{cursor:default;opacity:.65;--b:1}

  .enter-svg{position:absolute;inset:-6px;width:calc(100% + 12px);height:calc(100% + 12px);pointer-events:none}
  .enter-stroke{fill:none;stroke:#880015;stroke-width:3;stroke-linecap:round;opacity:0;transition:opacity 100ms ease}

  .icon{width:var(--iw,16px);height:auto;display:block;pointer-events:none}
  .hint{position:absolute;top:100%;left:50%;transform:translate(-50%,8px);font-size:.75rem;color:#fca5a5}
  @media (prefers-reduced-motion:reduce){.enter-btn{transition:none}}
</style>

<div
  class={`enter-wrap ${className}`}
  data-target={targetSelector}
  data-dur={String(durationMs)}
  data-overlay={overlaySelector}
  data-hide={hideOnComplete ? "1" : "0"}
  data-rx={String(strokeRadius)}
  data-start={strokeStart}
  style={`--iw:${iconWidth};`}
>
  <button class="enter-btn" type="button" aria-pressed="false">
    <span>{label}</span>
    {iconUrl && <img class="icon" src={iconUrl} alt="" aria-hidden="true" />}
    <svg class="enter-svg" viewBox="0 0 200 72" preserveAspectRatio="none">
      <rect class="enter-stroke" x="1.5" y="1.5" width="197" height="69" rx={strokeRadius} ry={strokeRadius} />
    </svg>
  </button>
</div>

<script is:inline>
(() => {
  const wrap = document.currentScript?.previousElementSibling;
  if (!wrap) return;
  const btn   = wrap.querySelector('.enter-btn');
  const rect  = wrap.querySelector('.enter-stroke');
  const hint  = wrap.querySelector('.hint');
  const durMs = Math.max(100, parseInt(wrap.getAttribute('data-dur') || '2000', 10));
  const targetSel  = wrap.getAttribute('data-target') || '#enter-stage';
  const overlaySel = wrap.getAttribute('data-overlay') || '';
  const hide       = wrap.getAttribute('data-hide') === '1';

  let holding = false;
  let rafId   = 0;
  let startTs = 0;
  let total   = 0;

  function setDashStart(){
    if (!(rect instanceof SVGRectElement)) return;

    // Get geometry
    const W  = parseFloat(rect.getAttribute('width')  || '197');
    const H  = parseFloat(rect.getAttribute('height') || '69');
    const rx = parseFloat(wrap.getAttribute('data-rx') || '10');
    const r  = Math.min(rx, Math.min(W, H) * 0.5);

    const flatTop   = Math.max(0, W - 2*r);
    const flatSide  = Math.max(0, H - 2*r);
    const qArc      = Math.PI * r / 2;

    try {
      total = rect.getTotalLength();
    } catch {
      total = 2 * (W + H - 2*r) + 2 * Math.PI * r;
    }

    // Hard-code start point to TOP-CENTER
    // path starts at top-left, so offset = half the top edge
    const offset = -flatTop / 2;

    rect.style.strokeDashoffset = String(offset);
    rect.style.strokeDasharray  = `0 ${total}`;
    rect.style.opacity = '0';
  }

  
  function reset(){
    holding = false;
    btn.setAttribute('aria-pressed','false');
    btn.style.setProperty('--press','1');
    rect.style.strokeDasharray = `0 ${total}`;
    rect.style.opacity = '0';
    cancelAnimationFrame(rafId);
  }

  function maybeFadeOverlay(){
    if (!overlaySel) return;
    const el = document.querySelector(overlaySel);
    if (!el) return;
    el.style.transition = 'opacity 220ms ease';
    el.style.opacity = '0';
    setTimeout(() => { el.style.display = 'none'; }, 240);
  }

  function activate(){
    const target = document.querySelector(targetSel);
    if (!target) return;
    target.setAttribute('data-entered','true');
    document.dispatchEvent(new CustomEvent('enter:activated', { detail: { selector: targetSel }}));
    if (hide) {
      const wrap = document.querySelector('.enter-wrap');
      if (wrap) wrap.style.display = 'none';
    }
    maybeFadeOverlay();
  }

  function step(ts){
    rafId = requestAnimationFrame(step);
    if (!startTs) startTs = ts;
    const t = ts - startTs;
    const p = Math.max(0, Math.min(1, t / durMs));
    const seg = p * total;

    // solid arc + gap pattern
    rect.style.strokeDasharray = `${seg.toFixed(2)} ${(total - seg).toFixed(2)}`;
    rect.style.strokeDashoffset = String(offset); // keep anchor fixed
    rect.style.opacity = '1';

    if (t >= durMs){
      cancelAnimationFrame(rafId);
      btn.setAttribute('aria-pressed','true');
      btn.style.setProperty('--press','1.02');
      activate();
    }
}


  const down = () => {
    if (holding) return;
    holding = true;
    startTs = 0;
    btn.style.setProperty('--press','1.02');
    rect.style.opacity = '1';
    rafId = requestAnimationFrame(step);
  };
  const up = () => { if (holding) reset(); };

  btn.addEventListener('pointerdown', down, { passive:true });
  btn.addEventListener('pointerup', up, { passive:true });
  btn.addEventListener('pointercancel', up, { passive:true });
  btn.addEventListener('pointerleave', up, { passive:true });
  btn.addEventListener('keydown', e => { if (e.key === ' ' || e.key === 'Enter') down(); });
  btn.addEventListener('keyup',   e => { if (e.key === ' ' || e.key === 'Enter') up(); });

  setDashStart();
  addEventListener('resize', setDashStart, { passive:true });
})();
</script>
