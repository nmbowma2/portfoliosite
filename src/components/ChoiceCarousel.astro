---
export interface Item { src: string | { src: string }; label?: string; href?: string }

export interface Props {
  items?: Item[];
  targetSelector?: string;

  /* Wrapper position (relative to the section) */
  top?: string; bottom?: string; left?: string; right?: string;
  centerX?: boolean; centerY?: boolean;
  offsetX?: string;  offsetY?: string;
  z?: number;

  /* Frame (image wrapper) sizing */
  frameMaxWidth?: string;   // e.g. "min(92vw, 960px)"
  frameAspect?: string;     // e.g. "16 / 9"
  frameRadius?: number;     // px radius for rounded corners
  frameScale?: number;      // overall scale of the frame (multiplier)

  /* Arrow art and controls */
  leftArrow?: string | { src: string };
  rightArrow?: string | { src: string };

  /* per-arrow absolute positioning (relative to the FRAME center) */
  leftX?: string;  leftY?: string;   // CSS length/%, applied from frame center
  rightX?: string; rightY?: string;
  leftScale?: number;  rightScale?: number; // scale factors
  arrowButtonSize?: string;                 // button hit area (e.g. "56px")
  arrowIconWidth?: string;                  // icon width inside button (e.g. "34px")

  navigateOnClick?: boolean;
  class?: string;
}

const {
  items = [],
  targetSelector = "#enter-stage",

  top = "auto", bottom = "96px", left = "50%", right = "auto",
  centerX = true, centerY = false, offsetX = "0", offsetY = "0", z = 60,

  frameMaxWidth = "min(92vw, 960px)",
  frameAspect = "16 / 9",
  frameRadius = 12,
  frameScale = 1,

  leftArrow, rightArrow,

  leftX = "-40%",  leftY = "60%",
  rightX = "40%",  rightY = "60%",
  leftScale = 1,   rightScale = 1,
  arrowButtonSize = "56px",
  arrowIconWidth = "34px",

  navigateOnClick = false,
  class: className = "",
} = Astro.props;

const toUrl = (x: any) => typeof x === "string" ? x : x?.src;
const normalized = items.map(it => ({ src: toUrl(it.src), label: it.label || "", href: it.href || "" }));
const lUrl = leftArrow  ? toUrl(leftArrow)  : null;
const rUrl = rightArrow ? toUrl(rightArrow) : null;

const tx = `${centerX ? "-50%" : "0"} + ${offsetX}`;
const ty = `${centerY ? "-50%" : "0"} + ${offsetY}`;
---

<style>
  .carousel-host{
    position:absolute;
    opacity:0; pointer-events:none;
    transition: opacity 200ms ease;
  }
  .carousel-host.is-on{ opacity:1; pointer-events:auto; }

  .shell{ position:relative; width: var(--frameW); }

  
  .frame{
    position: relative;
    width: 100%;
    aspect-ratio: var(--aspect);
    /* allow arrows to extend outside the frame bounds */
    overflow: visible;
    transform: scale(var(--frameScale));
    transform-origin: center;
  }
  /* new: clip only the image, not the arrows */
  .mask{
    position: absolute; inset: 0;
    background: #0f0f10;
    border-radius: var(--radius);
    overflow: hidden;
    box-shadow: 0 10px 28px rgba(0,0,0,.35);
  }
  .mask img{
    display:block; width:100%; height:100%;
    object-fit:cover; user-select:none; -webkit-user-drag:none;
  }
  /* Arrows absolutely over the FRAME, from its center */
  .nav{
    -webkit-tap-highlight-color: transparent;
    position:absolute; left:50%; top:50%;
    width: var(--btnSize); height: var(--btnSize);
    margin:0; padding:0; border:0; border-radius:9999px; background:transparent; cursor:pointer;
    display:grid; place-items:center;
    transform: translate(calc(-50% + var(--x)), calc(-50% + var(--y))) scale(var(--s));
    filter: brightness(var(--b,1));
    transition: filter 120ms ease, transform 120ms ease, opacity 180ms ease;
  }
  .nav:hover  { --b:.92; }
  .nav:active { --b:.85; transform: translate(calc(-50% + var(--x)), calc(-50% + var(--y))) scale(calc(var(--s) * 1.05)); }
  .nav img{ width: var(--iconW); height:auto; display:block; pointer-events:none; }
  .nav.left  img{ transform: rotate(90deg); }
  .nav.right img{ transform: rotate(-90deg); }

  @media (max-width: 640px){
    .nav{ --btnSize:44px; }
    .nav img{ --iconW:28px; }
  }
</style>

<div
  class={`carousel-host ${className}`}
  data-target={targetSelector}
  data-items={JSON.stringify(normalized)}
  data-nav={navigateOnClick ? "1" : "0"}
  style={`
    z-index:${z};
    top:${top}; bottom:${bottom}; left:${left}; right:${right};
    transform: translate(calc(${tx}), calc(${ty}));
    --frameW:${frameMaxWidth};
    --aspect:${frameAspect};
    --radius:${frameRadius}px;
    --frameScale:${frameScale};
    --btnSize:${arrowButtonSize};
    --iconW:${arrowIconWidth};
  `}
>
  <div class="shell">
    <div class="frame">
      <div class="mask">
        <img id="cc-img" alt="" />
      </div>
      <!-- arrows positioned relative to FRAME center -->
      <button class="nav left"  type="button" aria-label="Previous" style={`--x:${leftX};  --y:${leftY};  --s:${leftScale};`}>
        {lUrl ? <img src={lUrl} alt="" /> : <span aria-hidden="true" style="font-size:28px;line-height:1">‹</span>}
      </button>
      <button class="nav right" type="button" aria-label="Next"     style={`--x:${rightX}; --y:${rightY}; --s:${rightScale};`}>
        {rUrl ? <img src={rUrl} alt="" /> : <span aria-hidden="true" style="font-size:28px;line-height:1">›</span>}
      </button>
    </div>
  </div>
</div>

<script is:inline>
(() => {
  const host = document.currentScript?.previousElementSibling;
  if (!host) return;

  let items = [];
  try { items = JSON.parse(host.getAttribute('data-items') || '[]'); } catch {}
  if (!items.length) return;

  const img   = host.querySelector('#cc-img');
  const left  = host.querySelector('.nav.left');
  const right = host.querySelector('.nav.right');
  const navGo = host.getAttribute('data-nav') === '1';

  let i = 0;
  function render(){
    const it = items[i]; if (!it) return;
    img.src = it.src;
    img.alt = it.label || '';
  }
  function next(n){ i = (i + n + items.length) % items.length; render(); }

  left?.addEventListener('click',  () => next(-1));
  right?.addEventListener('click', () => next(+1));

  if (navGo){
    img.style.cursor = 'pointer';
    img.addEventListener('click', () => {
      const href = items[i]?.href;
      if (href) window.location.href = href;
    });
  }

  // show on activation (and render if already entered)
  const targetSel = host.getAttribute('data-target') || '#enter-stage';
  const target = document.querySelector(targetSel);
  const turnOn = () => { host.classList.add('is-on'); render(); };

  if (target?.getAttribute('data-entered') === 'true') turnOn();
  window.addEventListener('enter:activated', turnOn, { passive:true });
})();
</script>
