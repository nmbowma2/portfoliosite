---
export interface Item {
  src: string | { src: string };
  label?: string;
  href?: string;
  scale?: number;
  posX?: string;
  posY?: string;
}

export interface Props {
  items?: Item[];
  items2?: Item[];
  targetSelector?: string;
  top?: string; bottom?: string; left?: string; right?: string;
  centerX?: boolean; centerY?: boolean;
  offsetX?: string; offsetY?: string;
  verticalOffset?: string;
  z?: number;
  frameMaxWidth?: string;
  frameAspect?: string;
  frameRadius?: number;
  frameScale?: number;
  leftArrow?: string | { src: string };
  rightArrow?: string | { src: string };
  leftX?: string;  leftY?: string;  leftScale?: number;
  rightX?: string; rightY?: string; rightScale?: number;
  arrowButtonSize?: string;
  arrowIconWidth?: string;
  navigateOnClick?: boolean;
  enablePreload?: boolean;
  mode?: "fill" | "proportional";
  imageFit?: "cover" | "contain";
  imageScale?: number;
  imagePosX?: string;
  imagePosY?: string;
  secondaryImageOffset?: string;
  secondaryImageWidth?: string;
  secondaryImageHeight?: string;
  secondaryImageFit?: "cover" | "contain";
  secondaryImageRadius?: number;
  debug?: boolean;
  class?: string;
}

const {
  items = [],
  items2 = [],
  targetSelector = "#enter-stage",
  top, bottom, left, right,
  centerX = false, centerY = false,
  offsetX = "0", offsetY = "0",
  verticalOffset = "0px",
  z = 60,
  frameMaxWidth = "100%",
  frameAspect = "16 / 9",
  frameRadius = 12,
  frameScale = 1,
  leftArrow, rightArrow,
  leftX = "-475%",  leftY = "0%",   leftScale = 2.0,
  rightX = "475%",  rightY = "0%",  rightScale = 2.0,
  arrowButtonSize = "40px",
  arrowIconWidth = "24px",
  navigateOnClick = false,
  enablePreload = true,
  mode = "fill",
  imageFit = "cover",
  imageScale = 1.02,
  imagePosX = "50%",
  imagePosY = "50%",
  secondaryImageOffset = "0px",
  secondaryImageWidth = "150px",
  secondaryImageHeight = "100px",
  secondaryImageFit = "cover",
  secondaryImageRadius = 8,
  debug = false,
  class: className = "",
} = Astro.props;

const withBase = (u?: string) => {
  if (typeof u !== 'string') return u;
  
  if (u.includes(import.meta.env.BASE_URL) || u.startsWith('http') || u.startsWith('/@')) {
    return u;
  }
  
  if (u.startsWith('/')) {
    const baseUrl = import.meta.env.BASE_URL.endsWith('/') 
      ? import.meta.env.BASE_URL.slice(0, -1)
      : import.meta.env.BASE_URL;
    return baseUrl + u;
  }
  
  return u;
};

const toUrl = (x: any) => typeof x === 'string' ? x : x?.src || x;

// Pre-normalize data to avoid runtime processing
const normalized = items.map(it => ({
  src: typeof it.src === 'string' ? it.src : it.src?.src,
  label: it.label || "",
  href: typeof it.href === "string" ? withBase(it.href) : (it.href || ""),
  scale: it.scale,
  posX: it.posX,
  posY: it.posY,
}));

const normalized2 = items2.map(it => ({
  src: typeof it.src === 'string' ? it.src : it.src?.src,
  label: it.label || "",
  href: typeof it.href === "string" ? withBase(it.href) : (it.href || ""),
  scale: it.scale,
  posX: it.posX,
  posY: it.posY,
}));

const lUrl = leftArrow ? toUrl(leftArrow) : null;
const rUrl = rightArrow ? toUrl(rightArrow) : null;

// Generate unique ID for this instance
const instanceId = `carousel-${Math.random().toString(36).substr(2, 9)}`;
---

<style>
  .carousel-host{
    position:absolute;
    opacity:0;
    pointer-events:none; 
    transition: opacity 200ms ease;
    top: var(--host-top);
    bottom: var(--host-bottom);
    left: var(--host-left);
    right: var(--host-right);
    transform: translate(calc(var(--host-tx)), calc(var(--host-ty) + var(--vertical-offset)));
    z-index: var(--z);
  }
  .carousel-host.is-on{ 
    opacity:1; 
    pointer-events:auto;
  }

  .shell{ 
    position:relative; 
    width: var(--frameW); 
    height: 100%; 
  }

  .frame {
    position:relative; width:100%; height:100%;
    border-radius: var(--radius);
    overflow:visible;
  }
  .frame.fill { transform: none; }
  .frame.proportional {
    aspect-ratio: var(--aspect);
    transform: scale(var(--frameScale));
    transform-origin:center center;
  }

  .mask{
    position:absolute; inset:0;
    clip-path: inset(0 round var(--radius));
    cursor: pointer;
    transition: transform 120ms ease;
  }

  .mask:hover {
    transform: scale(1.02);
  }

  .mask img{
    display:block; width:100%; height:100%;
    object-fit: var(--img-fit);
    object-position: var(--img-pos-x) var(--img-pos-y);
    transform: scale(var(--img-scale));
    user-select:none; -webkit-user-drag:none;
  }

  .secondary-image {
    position: absolute;
    top: calc(100% + var(--secondary-offset));
    left: 50%;
    transform: translateX(-50%);
    width: var(--secondary-width);
    height: var(--secondary-height);
    border-radius: var(--secondary-radius);
    overflow: hidden;
    opacity: 0;
    transition: opacity 200ms ease, transform 120ms ease;
    cursor: pointer;
  }

  .secondary-image:hover {
    transform: translateX(-50%) scale(1.05);
  }

  .secondary-image.loaded {
    opacity: 1;
  }

  .secondary-image img {
    width: 100%;
    height: 100%;
    object-fit: var(--secondary-fit);
    display: block;
    user-select: none;
    -webkit-user-drag: none;
  }

  .nav{
    -webkit-tap-highlight-color: transparent;
    position:absolute; left:50%; top:50%;
    width: var(--btnSize); height: var(--btnSize);
    margin:0; padding:0; border:0; border-radius:0; 
    background: transparent;
    cursor:pointer;
    display:grid; place-items:center;
    transform: translate(calc(-50% + var(--x)), calc(-50% + var(--y))) scale(var(--s));
    opacity: 0.85;
    transition: opacity 120ms ease, transform 120ms ease;
    z-index: 10;
  }
  .nav:hover  { 
    opacity: 1; 
    transform: translate(calc(-50% + var(--x)), calc(-50% + var(--y))) scale(calc(var(--s) * 1.1));
  }
  .nav:active { 
    opacity: 0.6; 
    transform: translate(calc(-50% + var(--x)), calc(-50% + var(--y))) scale(calc(var(--s) * 0.95)); 
  }
  .nav img{ 
    width: var(--iconW); 
    height:auto; 
    display:block; 
    pointer-events:none;
    filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));
  }
  .nav.left  img{ transform: rotate(0deg); }
  .nav.right img{ transform: rotate(-180deg); }
  
  .debug-status {
    position: absolute;
    top: -25px;
    left: 0;
    background: black;
    color: white;
    padding: 2px 8px;
    font-size: 12px;
    border-radius: 3px;
    z-index: 1000;
    display: none;
  }

  .debug .debug-status {
    display: block;
  }

  /* Preload hidden images */
  .preload-images {
    position: absolute;
    opacity: 0;
    pointer-events: none;
    width: 1px;
    height: 1px;
    overflow: hidden;
  }
</style>

<div
  class={`carousel-host ${debug ? 'debug' : ''} ${className}`}
  data-target={targetSelector}
  data-instance-id={instanceId}
  style={`
    --host-top:${top ?? "auto"};
    --host-bottom:${bottom ?? "auto"};
    --host-left:${left ?? "auto"};
    --host-right:${right ?? "auto"};
    --host-tx:${centerX ? "-50%" : offsetX};
    --host-ty:${centerY ? "-50%" : offsetY};
    --z:${z};
  `}
>
  <div class="debug-status">CAROUSEL: WAITING</div>
  <div
    class="shell"
    style={`
      --frameW:${frameMaxWidth};
      transform: translateY(${verticalOffset});
    `}
  >
    <div
      class={`frame ${mode}`}
      style={`
        --aspect:${frameAspect};
        --radius:${frameRadius}px;
        --frameScale:${frameScale};
        --img-fit:${imageFit};
        --img-scale:${imageScale};
        --img-pos-x:${imagePosX};
        --img-pos-y:${imagePosY};
        --btnSize:${arrowButtonSize};
        --iconW:${arrowIconWidth};
        --secondary-offset:${secondaryImageOffset};
        --secondary-width:${secondaryImageWidth};
        --secondary-height:${secondaryImageHeight};
        --secondary-fit:${secondaryImageFit};
        --secondary-radius:${secondaryImageRadius}px;
      `}
      data-nav={navigateOnClick ? "1" : "0"}
    >
      <!-- Main image -->
      <div class="mask" data-clickable="main">
        <img alt="" loading="eager" />
      </div>

      <!-- Secondary image -->
      <div class="secondary-image" data-clickable="secondary">
        <img alt="" loading="lazy" />
      </div>

      <!-- LEFT ARROW -->
      <button
        class="nav left"
        type="button"
        aria-label="Previous"
        style={`--x:${leftX}; --y:${leftY}; --s:${leftScale};`}
      >
        {lUrl ? <img src={lUrl} alt="" loading="lazy" /> : <span aria-hidden="true" style="font-size:20px;line-height:1">‹</span>}
      </button>

      <!-- RIGHT ARROW -->
      <button
        class="nav right"
        type="button"
        aria-label="Next"
        style={`--x:${rightX}; --y:${rightY}; --s:${rightScale};`}
      >
        {rUrl ? <img src={rUrl} alt="" loading="lazy" /> : <span aria-hidden="true" style="font-size:20px;line-height:1">›</span>}
      </button>
    </div>
  </div>

  <!-- Preload images for faster navigation -->
  {enablePreload && (
    <div class="preload-images">
      {normalized.slice(0, 3).map((item) => (
        <img src={item.src} alt="" loading="lazy" />
      ))}
      {normalized2.slice(0, 3).map((item) => (
        <img src={item.src} alt="" loading="lazy" />
      ))}
    </div>
  )}
</div>

<script is:inline define:vars={{ normalized, normalized2, targetSelector, instanceId, debug, enablePreload }}>
(() => {
  const log = debug ? console.log.bind(console, `🎠[${instanceId}]`) : () => {};
  const warn = debug ? console.warn.bind(console, `⚠️[${instanceId}]`) : () => {};
  const error = debug ? console.error.bind(console, `❌[${instanceId}]`) : () => {};

  log('Initializing...');
  
  // Use the passed instance ID to find our specific carousel
  const host = document.querySelector(`[data-instance-id="${instanceId}"]`);
  
  if (!host) {
    error('Host element not found');
    return;
  }

  // Cache DOM elements immediately
  const elements = {
    debugStatus: host.querySelector('.debug-status'),
    frame: host.querySelector('.frame'),
    img: host.querySelector('.mask img'),
    secondaryImg: host.querySelector('.secondary-image img'),
    secondaryContainer: host.querySelector('.secondary-image'),
    mainImageContainer: host.querySelector('.mask'),
    left: host.querySelector('.nav.left'),
    right: host.querySelector('.nav.right')
  };

  function updateStatus(status) {
    if (elements.debugStatus && debug) {
      elements.debugStatus.textContent = `CAROUSEL: ${status}`;
    }
    log(status);
  }

  // Validate required elements
  if (!elements.frame || !elements.img) {
    error('Required elements missing');
    return;
  }

  // Use passed data directly (no JSON parsing needed)
  const items = normalized || [];
  const items2 = normalized2 || [];
  
  if (!items.length) {
    warn('No items provided');
    updateStatus('NO ITEMS');
    return;
  }

  updateStatus(`Ready: ${items.length} main, ${items2.length} secondary`);

  let currentIndex = 0;
  let currentSecondaryIndex = 0;
  let isActive = false;

  // Image loading optimization
  const imageCache = new Map();
  
  function preloadImage(src) {
    if (!enablePreload || imageCache.has(src)) return;
    
    const img = new Image();
    img.src = src;
    imageCache.set(src, img);
  }

  // Preload first few images immediately

  const idle = (typeof window !== 'undefined' && 'requestIdleCallback' in window)
    ? window.requestIdleCallback
    : (cb) => setTimeout(cb, 0);

  if (enablePreload) {
    idle(() => {
      try {
        items.slice(0, 3).forEach(item => preloadImage(item.src));
        items2.slice(0, 3).forEach(item => preloadImage(item.src));
      } catch (e) {
        // don’t let preload failures block activation
        console.warn('preload error', e);
      }
    });
  }
  
  function setImage(item, isSecondary = false) {
    if (!item?.src) return;
    
    const img = isSecondary ? elements.secondaryImg : elements.img;
    const container = isSecondary ? elements.secondaryContainer : null;
    
    if (!img) return;
    
    // Use cached image if available for faster loading
    const cachedImg = imageCache.get(item.src);
    if (cachedImg && cachedImg.complete) {
      img.src = item.src;
    } else {
      img.src = item.src;
      if (enablePreload) preloadImage(item.src);
    }
    
    img.alt = item.label || '';
    
    if (container) {
      container.classList.add('loaded');
    }
  }
  
  function render() {
    if (!isActive) return;
    
    const item = items[currentIndex];
    const secondaryItem = items2[currentSecondaryIndex];
    
    setImage(item, false);
    
    if (items2.length > 0 && secondaryItem) {
      setImage(secondaryItem, true);
    }
    
    updateStatus(`Showing ${currentIndex + 1}/${items.length}${items2.length ? `, sec: ${currentSecondaryIndex + 1}/${items2.length}` : ''}`);
    
    // Preload next images
    if (enablePreload) {
      const nextIndex = (currentIndex + 1) % items.length;
      const nextSecondaryIndex = (currentSecondaryIndex + 1) % items2.length;
      
      if (items[nextIndex]) preloadImage(items[nextIndex].src);
      if (items2[nextSecondaryIndex]) preloadImage(items2[nextSecondaryIndex].src);
    }
  }
  
  function navigate(direction) {
    currentIndex = (currentIndex + direction + items.length) % items.length;
    
    if (items2.length > 0) {
      currentSecondaryIndex = (currentSecondaryIndex + direction + items2.length) % items2.length;
    }
    
    render();
  }

  function handleImageClick(isSecondary = false) {
    const currentItems = isSecondary ? items2 : items;
    const currentIdx = isSecondary ? currentSecondaryIndex : currentIndex;
    const currentItem = currentItems[currentIdx];
    
    if (currentItem?.href) {
      if (currentItem.href.startsWith('http')) {
        window.open(currentItem.href, '_blank', 'noopener,noreferrer');
      } else {
        window.location.href = currentItem.href;
      }
    }
  }

  // Event listeners with passive option for better performance
  elements.mainImageContainer?.addEventListener('click', (e) => {
    e.stopPropagation();
    handleImageClick(false);
  }, { passive: false });

  elements.secondaryContainer?.addEventListener('click', (e) => {
    e.stopPropagation();
    handleImageClick(true);
  }, { passive: false });

  elements.left?.addEventListener('click', (e) => {
    e.stopPropagation();
    navigate(-1);
  }, { passive: false });

  elements.right?.addEventListener('click', (e) => {
    e.stopPropagation();
    navigate(1);
  }, { passive: false });

  // Activation logic
  const target = document.querySelector(targetSelector);
  
  function activate() {
    if (isActive) return;
    
    log('Activating carousel');
    isActive = true;
    host.classList.add('is-on');
    
    // Force visibility debug for mobile
    if (debug) {
      const rect = host.getBoundingClientRect();
      log(`Carousel bounds: ${rect.width}x${rect.height} at (${rect.left}, ${rect.top})`);
      log(`Computed styles:`, window.getComputedStyle(host));
    }
    
    render();
    updateStatus('ACTIVE');
  }

  // Check if already activated
  if (target?.getAttribute('data-entered') === 'true') {
    activate();
  }

  // Single consolidated event handler
  function handleActivation(e) {
    if (!e?.detail?.selector || e.detail.selector === targetSelector) {
      activate();
    }
  }

  // Use more efficient event delegation
  const events = ['enter:activated', 'enterActivated'];
  events.forEach(eventName => {
    window.addEventListener(eventName, handleActivation, { passive: true, once: true });
    document.addEventListener(eventName, handleActivation, { passive: true, once: true });
  });

  // Development helper
  if (debug) {
    window[`testCarousel_${instanceId}`] = activate;
  }

  // Load first image immediately for preview
  if (items[0]) {
    setImage(items[0], false);
  }
  if (items2[0]) {
    setImage(items2[0], true);
  }

  updateStatus('READY');
  log('Initialization complete');
})();
</script>