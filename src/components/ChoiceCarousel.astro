---
export interface Item {
  src: string | { src: string };
  label?: string;
  href?: string;
  scale?: number;
  posX?: string;
  posY?: string;
}

export interface Props {
  items?: Item[];
  targetSelector?: string;
  top?: string; bottom?: string; left?: string; right?: string;
  centerX?: boolean; centerY?: boolean;
  offsetX?: string; offsetY?: string;
  z?: number;
  frameMaxWidth?: string;
  frameAspect?: string;
  frameRadius?: number;
  frameScale?: number;
  leftArrow?: string | { src: string };
  rightArrow?: string | { src: string };
  leftX?: string;  leftY?: string;  leftScale?: number;
  rightX?: string; rightY?: string; rightScale?: number;
  arrowButtonSize?: string;
  arrowIconWidth?: string;
  navigateOnClick?: boolean;
  enablePreload?: boolean;
  mode?: "fill" | "proportional";
  imageFit?: "cover" | "contain";
  imageScale?: number;
  imagePosX?: string;
  imagePosY?: string;
  class?: string;
}

const {
  items = [],
  targetSelector = "#enter-stage",
  top, bottom, left, right,
  centerX = false, centerY = false,
  offsetX = "0", offsetY = "0", z = 60,
  frameMaxWidth = "100%",
  frameAspect = "16 / 9",
  frameRadius = 12,
  frameScale = 1,
  leftArrow, rightArrow,
  leftX = "-50%",  leftY = "120%",   leftScale = 1,
  rightX = "50%",  rightY = "120%",  rightScale = 1,
  arrowButtonSize = "40px",
  arrowIconWidth = "24px",
  navigateOnClick = false,
  enablePreload = true,
  mode = "fill",
  imageFit = "cover",
  imageScale = 1.02,
  imagePosX = "50%",
  imagePosY = "50%",
  class: className = "",
} = Astro.props;

const withBase = (u?: string) => {
  if (typeof u !== 'string') return u;
  
  // If it already includes the base URL or is an absolute URL, return as-is
  if (u.includes(import.meta.env.BASE_URL) || u.startsWith('http') || u.startsWith('/@')) {
    return u;
  }
  
  // Only prepend base URL if it starts with /
  if (u.startsWith('/')) {
    return import.meta.env.BASE_URL + u.slice(1);
  }
  
  return u;
};

const toUrl = (x: any) => {
  if (typeof x === 'string') return x;
  return x?.src || x;
};

const normalized = items.map(it => ({
  src: typeof it.src === 'string' ? it.src : it.src?.src,
  label: it.label || "",
  href: typeof it.href === "string" ? withBase(it.href) : (it.href || ""),
  scale: it.scale,
  posX: it.posX,
  posY: it.posY,
}));

const lUrl = leftArrow ? toUrl(leftArrow) : null;
const rUrl = rightArrow ? toUrl(rightArrow) : null;
---

<style>
  .carousel-host{
    position:absolute;
    opacity:0; pointer-events:none;
    transition: opacity 200ms ease;
    top: var(--host-top);
    bottom: var(--host-bottom);
    left: var(--host-left);
    right: var(--host-right);
    transform: translate(calc(var(--host-tx)), calc(var(--host-ty)));
    z-index: var(--z);
  }
  .carousel-host.is-on{ 
    opacity:1; 
    pointer-events:auto;
  }

  .shell{ position:relative; width: var(--frameW); height: 100%; }

  .frame {
    position:relative; width:100%; height:100%;
    border-radius: var(--radius);
    overflow:visible; /* Changed from hidden to allow arrows below */
  }
  .frame.fill { transform: none; }
  .frame.proportional {
    aspect-ratio: var(--aspect);
    transform: scale(var(--frameScale));
    transform-origin:center center;
  }

  .mask{
    position:absolute; inset:0;
    clip-path: inset(0 round var(--radius));
  }

  .mask img{
    display:block; width:100%; height:100%;
    object-fit: var(--img-fit);
    object-position: var(--img-pos-x) var(--img-pos-y);
    transform: scale(var(--img-scale));
    user-select:none; -webkit-user-drag:none;
  }

  .nav{
    -webkit-tap-highlight-color: transparent;
    position:absolute; left:50%; top:50%;
    width: var(--btnSize); height: var(--btnSize);
    margin:0; padding:0; border:0; border-radius:0; 
    background: transparent; /* Completely transparent */
    cursor:pointer;
    display:grid; place-items:center;
    transform: translate(calc(-50% + var(--x)), calc(-50% + var(--y))) scale(var(--s));
    opacity: 0.7;
    transition: opacity 120ms ease, transform 120ms ease;
  }
  .nav:hover  { 
    opacity: 1; 
    transform: translate(calc(-50% + var(--x)), calc(-50% + var(--y))) scale(calc(var(--s) * 1.1));
  }
  .nav:active { 
    opacity: 0.8; 
    transform: translate(calc(-50% + var(--x)), calc(-50% + var(--y))) scale(calc(var(--s) * 0.95)); 
  }
  .nav img{ 
    width: var(--iconW); 
    height:auto; 
    display:block; 
    pointer-events:none;
    filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));
  }
  .nav.left  img{ transform: rotate(90deg); }
  .nav.right img{ transform: rotate(-90deg); }
  
  /* Debug status - remove in production */
  .debug-status {
    position: absolute;
    top: -25px;
    left: 0;
    background: black;
    color: white;
    padding: 2px 8px;
    font-size: 12px;
    border-radius: 3px;
    z-index: 1000;
    display: none; /* Hide by default */
  }
</style>

<div
  class={`carousel-host ${className}`}
  data-target={targetSelector}
  data-items={JSON.stringify(normalized)}
  style={`
    --host-top:${top ?? "auto"};
    --host-bottom:${bottom ?? "auto"};
    --host-left:${left ?? "auto"};
    --host-right:${right ?? "auto"};
    --host-tx:${centerX ? "-50%" : offsetX};
    --host-ty:${centerY ? "-50%" : offsetY};
    --z:${z};
  `}
>
  <div class="debug-status">CAROUSEL: WAITING</div>
  <div
    class="shell"
    style={`--frameW:${frameMaxWidth};`}
  >
    <div
      class={`frame ${mode}`}
      style={`
        --aspect:${frameAspect};
        --radius:${frameRadius}px;
        --frameScale:${frameScale};
        --img-fit:${imageFit};
        --img-scale:${imageScale};
        --img-pos-x:${imagePosX};
        --img-pos-y:${imagePosY};
        --btnSize:${arrowButtonSize};
        --iconW:${arrowIconWidth};
      `}
      data-nav={navigateOnClick ? "1" : "0"}
    >
      <div class="mask"><img alt="" /></div>

      <!-- LEFT ARROW - Positioned below and to the left -->
      <button
        class="nav left"
        type="button"
        aria-label="Previous"
        style={`--x:${leftX}; --y:${leftY}; --s:${leftScale};`}
      >
        {lUrl ? <img src={lUrl} alt="" /> : <span aria-hidden="true" style="font-size:20px;line-height:1">‚Äπ</span>}
      </button>

      <!-- RIGHT ARROW - Positioned below and to the right -->
      <button
        class="nav right"
        type="button"
        aria-label="Next"
        style={`--x:${rightX}; --y:${rightY}; --s:${rightScale};`}
      >
        {rUrl ? <img src={rUrl} alt="" /> : <span aria-hidden="true" style="font-size:20px;line-height:1">‚Ä∫</span>}
      </button>
    </div>
  </div>
</div>

<script is:inline>
(() => {
  console.log('üîÑ ChoiceCarousel: Script starting...');
  
  const host = document.currentScript?.previousElementSibling;
  const debugStatus = host?.querySelector('.debug-status');
  
  function updateStatus(status) {
    if (debugStatus) debugStatus.textContent = `CAROUSEL: ${status}`;
    console.log(`üé† ChoiceCarousel: ${status}`);
  }
  
  if (!host) {
    console.error('‚ùå ChoiceCarousel: Host element not found');
    return;
  }

  updateStatus('HOST FOUND');

  let items = [];
  try { 
    const itemsData = host.getAttribute('data-items') || '[]';
    items = JSON.parse(itemsData);
    updateStatus(`${items.length} ITEMS LOADED`);
  } catch (e) {
    console.error('‚ùå ChoiceCarousel: Failed to parse items:', e);
    updateStatus('PARSE ERROR');
    return;
  }
  
  if (!items.length) {
    console.warn('‚ö†Ô∏è ChoiceCarousel: No items found');
    updateStatus('NO ITEMS');
    return;
  }

  const frame = host.querySelector('.frame');
  const img   = host.querySelector('.mask img');
  const left  = host.querySelector('.nav.left');
  const right = host.querySelector('.nav.right');

  if (!(frame && img)) {
    console.error('‚ùå ChoiceCarousel: Required elements not found', { frame, img });
    updateStatus('ELEMENTS MISSING');
    return;
  }

  updateStatus('ELEMENTS READY');

  let i = 0;
  function setImage(it) {
    const src = it?.src;
    if (!src) return;
    console.log('üñºÔ∏è Setting image:', src);
    img.src = src;
    img.alt = it?.label || '';
  }
  
  function render() { 
    const it = items[i];
    console.log(`üé® Rendering item ${i}:`, it);
    setImage(it);
    updateStatus(`SHOWING ${i + 1}/${items.length}`);
  }
  
  function next(n) { 
    i = (i + n + items.length) % items.length; 
    console.log(`‚û°Ô∏è Navigation: new index ${i}`);
    render(); 
  }

  // Navigation
  left?.addEventListener('click',  () => next(-1));
  right?.addEventListener('click', () => next(+1));

  // ACTIVATION LOGIC
  const targetSel = host.getAttribute('data-target') || '#enter-stage';
  console.log('üéØ Target selector:', targetSel);
  
  const target = document.querySelector(targetSel);
  console.log('üéØ Target element:', target);
  
  const turnOn = () => { 
    console.log('üü¢ TURNING ON CAROUSEL');
    updateStatus('ACTIVATING...');
    host.classList.add('is-on');
    render();
    updateStatus('ACTIVE');
  };

  // Check if already activated
  if (target?.getAttribute('data-entered') === 'true') {
    console.log('‚úÖ Target already has data-entered=true');
    updateStatus('ALREADY ACTIVE');
    turnOn();
  }

  // Listen for activation event
  const handleActivation = (e) => {
    console.log('üöÄ RECEIVED ACTIVATION EVENT:', e);
    console.log('üöÄ Event type:', e.type);
    console.log('üöÄ Event detail:', e.detail);
    
    try { 
      const sel = e?.detail?.selector; 
      console.log('üöÄ Event selector:', sel, 'Target selector:', targetSel);
      if (!sel || sel === targetSel) {
        console.log('‚úÖ Selector matches - ACTIVATING!');
        turnOn();
      } else {
        console.log('‚ùå Selector mismatch');
      }
    }
    catch (err) { 
      console.error('üí• Error in activation handler:', err);
      turnOn(); 
    }
  };

  // Listen on BOTH window and document
  window.addEventListener('enter:activated', handleActivation);
  document.addEventListener('enter:activated', handleActivation);
  
  // Also listen for custom events that might be dispatched differently
  window.addEventListener('enterActivated', handleActivation);
  document.addEventListener('enterActivated', handleActivation);

  console.log('üéß All event listeners attached');
  updateStatus('WAITING FOR ACTIVATION');

  // Show first image immediately for testing
  setTimeout(() => {
    if (items[0]) {
      console.log('üñºÔ∏è Loading first image for preview');
      setImage(items[0]);
    }
  }, 100);

  console.log('‚úÖ ChoiceCarousel: Initialization complete');
  
  // Global function for testing
  window.testCarouselActivation = () => {
    console.log('üîß Window function called');
    turnOn();
  };
})();
</script>