---
export interface Item { src: string | { src: string }; href: string; label?: string }
export interface Props {
  items?: Item[];
  targetSelector?: string;         // default "#enter-stage"
  leftArrow?: string | { src: string };
  rightArrow?: string | { src: string };
  class?: string;
}
const {
  items = [],
  targetSelector = "#enter-stage",
  leftArrow,
  rightArrow,
  class: className = "",
} = Astro.props;

const url = (x: any) => typeof x === "string" ? x : x?.src;
const normalized = items.map(it => ({ src: url(it.src), href: it.href, label: it.label || "" }));
---

<style>
  .carousel-host {
    position:absolute; inset:0; z-index:60;
    display:grid; place-items:center;
    opacity:0; pointer-events:none;
    transition: opacity 200ms ease;
  }
  .carousel-host.is-on { opacity:1; pointer-events:auto; }

  .carousel { position:relative; width:min(92vw, 960px); display:flex; align-items:center; gap:16px; }
  .slide { position:relative; width:100%; aspect-ratio: 16 / 9; border-radius:12px; overflow:hidden; background:#0f0f10; box-shadow:0 10px 28px rgba(0,0,0,.35); }
  .slide a, .slide img { display:block; width:100%; height:100%; object-fit:cover; }

  .nav { -webkit-tap-highlight-color: transparent; position:absolute; top:50%; transform:translateY(-50%); background:transparent; border:0; padding:0; cursor:pointer;
         width:56px; height:56px; border-radius:9999px; display:grid; place-items:center; filter: brightness(var(--b,1)); transform-origin:center; transform: scale(var(--s,1));
         transition: filter 120ms ease, transform 120ms ease; }
  .nav:hover  { --b:.9; }
  .nav:active { --b:.8; --s:1.05; }
  .nav img { width:34px; height:auto; display:block; pointer-events:none; }
  .nav.left  { left:-8px; }
  .nav.right { right:-8px; }

  @media (max-width: 640px){ .nav{ width:44px; height:44px; } .nav img{ width:28px; } }
</style>

<div class={`carousel-host ${className}`} data-target={targetSelector} data-items={JSON.stringify(normalized)}>
  <div class="carousel">
    <button class="nav left" type="button" aria-label="Previous"><span aria-hidden="true" style="font-size:28px;line-height:1">‹</span></button>
    <div class="slide"><a id="cc-link" href="#" aria-label="Open"></a></div>
    <button class="nav right" type="button" aria-label="Next"><span aria-hidden="true" style="font-size:28px;line-height:1">›</span></button>
  </div>
</div>

<script is:inline>
(() => {
  const host  = document.currentScript?.previousElementSibling;
  if (!host) return;

  const itemsAttr = host.getAttribute('data-items') || '[]';
  let items = [];
  try { items = JSON.parse(itemsAttr); } catch {}
  if (!items.length) return;

  const link  = host.querySelector('#cc-link');
  const left  = host.querySelector('.nav.left');
  const right = host.querySelector('.nav.right');

  let i = 0;
  function render(){
    const it = items[i]; if (!it) return;
    link.href = it.href;
    link.innerHTML = `<img src="${it.src}" alt="${it.label || ''}" loading="eager" decoding="async">`;
    link.setAttribute('aria-label', it.label ? `Open ${it.label}` : 'Open');
  }

  left?.addEventListener('click', () => { i = (i - 1 + items.length) % items.length; render(); });
  right?.addEventListener('click', () => { i = (i + 1) % items.length; render(); });

  // Turn on immediately if already "entered"
  const targetSel = host.getAttribute('data-target') || '#enter-stage';
  const target = document.querySelector(targetSel);
  const turnOn = () => { host.classList.add('is-on'); render(); };

  if (target?.getAttribute('data-entered') === 'true') turnOn();
  window.addEventListener('enter:activated', (e) => {
    if (!target) return;
    // only react if event targets the same section
    turnOn();
  }, { passive:true });
})();
</script>
